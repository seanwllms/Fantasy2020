filter(hitter_projections, status != "drafted" & position =="catcher") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
filter(hitter_projections, status != "drafted" & position == "outfield") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=picks.left)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Remaining Picks")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
drafterrors
write.csv(pasadena, "pasadena.csv")
write.csv(marmaduke, "marmaduke.csv")
standings.output
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=picks.left)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Remaining Picks")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=picks.left, label = team_name))
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=picks.left, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Remaining Picks") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=picks.left, y=total_points, label = team_name))
marmaduke
source("compileleague.R")
library(dplyr)
standings.output %>% mutate(hit.points = R_points + HR_points + RBI_points + SB_points + AVG_points,
pitch.points = ERA_points + WHIP_points + K_points + SV_points + W_points) %>%
select(team_name, spent, left, picks.left, total_points, hit.points,
pitch.points)
toppitch <- filter(pitcher_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, IP, ERA, WHIP, K, SV, W, pts, dlr)
data.frame(toppitch[1:20,])
topdh <- filter(hitter_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr)
data.frame(topdh)[1:20,]
filter(hitter_projections, status != "drafted" & position %in% c("second_base","shortstop")) %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
filter(hitter_projections, status != "drafted" & position =="catcher") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
filter(hitter_projections, status != "drafted" & position == "outfield") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=picks.left, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Remaining Picks") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=picks.left, y=total_points, label = team_name))
drafterrors
write.csv(pasadena, "pasadena.csv")
write.csv(marmaduke, "marmaduke.csv")
marmaduke
arrange(standings.output, -left)
#set up file
library(dplyr)
library(reshape2)
#read in results from pre-2014
results <- read.csv("./history/historicalresults.csv") %>%
select(1:4)
#fill in results for years that it is missing
results[1:540, 4] <- c(rep(2010, 18), rep(2011, 18), rep(2012, 18))
#convert to lowercase
results$Category <- tolower(results$Category)
#reorder columsn to match 2014 and 2015
results <- select(results, Category, Value, Year, Points)
######################################
#####read in the 2014 results#########
######################################
standings.2014 <- read.csv("./history/results2014.csv",stringsAsFactors = FALSE) %>%
select(R, HR, RBI, SB, Avg, W, K, Sv, ERA, WHIP)
standings.2014[,c("R","K")] <- sapply(standings.2014[,c("R","K")], gsub,pattern=",",replacement="")
standings.2014 <- sapply(standings.2014, as.numeric)
standings.2014 <- melt(standings.2014) %>% mutate(Category = tolower(Var2), Value = value, Year=2014) %>% select(4:6) %>%
group_by(Category) %>%
arrange(desc(Value)) %>%
mutate(Points=min_rank(Value))
standings.2014[standings.2014$Category %in% c("era", "whip"),"Points"] <- 19-standings.2014[standings.2014$Category %in% c("era", "whip"),"Points"]
######################################
#####read in the 2015 results#########
######################################
standings.2015 <- read.csv("./history/results2015.csv",stringsAsFactors = FALSE) %>%
select(R, HR, RBI, SB, Avg, W, K, Sv, ERA, WHIP)
standings.2015 <- sapply(standings.2015, as.numeric)
standings.2015 <- melt(standings.2015) %>% mutate(Category = tolower(Var2), Value = value, Year=2015) %>% select(4:6) %>%
group_by(Category) %>%
arrange(desc(Value)) %>%
mutate(Points=min_rank(Value))
standings.2015[standings.2015$Category %in% c("era", "whip"),"Points"] <- 19-standings.2015[standings.2015$Category %in% c("era", "whip"),"Points"]
######################################
##### Merge All Results Together######
######################################
results <- bind_rows(results, standings.2014, standings.2015) %>%
#filter out rows from 2013 that seem to be outliers
filter(!(Year==2013 & Category %in% c("r", "rbi", "hr")))
save(results, "historicalresults.rda")
######################################
#####Graphs and Analysis go Here######
######################################
library(ggplot2)
library(broom)
catplot <- ggplot(results, aes(x=Value, y=Points)) +
geom_point() +
facet_wrap(~ Category, ncol=2, scales="free_x")
ggsave("catplot.png", catplot, width=6, height = 8)
###Regression Time####
#filter out 1, 2, 17 and 18 point recipients (skew results)
regress <- results %>% filter(Points > 2 & Points < 17)
#run the regression for each category
regress <- regress %>% group_by(Category) %>%
do(regresults = lm(Points ~ Value, data=.))
#organize regression results in to tidy df for calculating value
coefs <- tidy(regress, regresults) %>%
filter(term == "Value") %>%
select(Category, estimate)
save(coefs, file="coefs.rda")
#organize regression results in to tidy df for calculating standings
coefs.standings <- tidy(regress, regresults) %>% select(Category, term, estimate) %>%
dcast(Category ~ term)
names(coefs.standings)[2:3] <- c("yint", "coef")
save(coefs.standings, file="standingscoefs.rda")
save(results, file="historicalresults.rda")
results
arrange(results, year)
arrange(results, Year)
getwd()
source("compileleague.R")
library(dplyr)
standings.output %>% mutate(hit.points = R_points + HR_points + RBI_points + SB_points + AVG_points,
pitch.points = ERA_points + WHIP_points + K_points + SV_points + W_points) %>%
select(team_name, spent, left, picks.left, total_points, hit.points,
pitch.points)
toppitch <- filter(pitcher_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, IP, ERA, WHIP, K, SV, W, pts, dlr)
data.frame(toppitch[1:20,])
topdh <- filter(hitter_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr)
data.frame(topdh)[1:20,]
filter(hitter_projections, status != "drafted" & position %in% c("second_base","shortstop")) %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
filter(hitter_projections, status != "drafted" & position =="catcher") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
filter(hitter_projections, status != "drafted" & position == "outfield") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
library(ggplot2)
library(ggrepel)
install.packages("grepel")
deeber
deener
source("compileleague.R")
library(dplyr)
standings.output %>% mutate(hit.points = R_points + HR_points + RBI_points + SB_points + AVG_points,
pitch.points = ERA_points + WHIP_points + K_points + SV_points + W_points) %>%
select(team_name, spent, left, picks.left, total_points, hit.points,
pitch.points)
toppitch <- filter(pitcher_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, IP, ERA, WHIP, K, SV, W, pts, dlr)
data.frame(toppitch[1:20,])
topdh <- filter(hitter_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr)
data.frame(topdh)[1:20,]
filter(hitter_projections, status != "drafted" & position %in% c("second_base","shortstop")) %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
filter(hitter_projections, status != "drafted" & position =="catcher") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
filter(hitter_projections, status != "drafted" & position == "outfield") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
library(ggplot2)
library(ggrepel)
install.packages("ggrepel")
source("compileleague.R")
library(dplyr)
standings.output %>% mutate(hit.points = R_points + HR_points + RBI_points + SB_points + AVG_points,
pitch.points = ERA_points + WHIP_points + K_points + SV_points + W_points) %>%
select(team_name, spent, left, picks.left, total_points, hit.points,
pitch.points)
toppitch <- filter(pitcher_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, IP, ERA, WHIP, K, SV, W, pts, dlr)
data.frame(toppitch[1:20,])
topdh <- filter(hitter_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr)
data.frame(topdh)[1:20,]
filter(hitter_projections, status != "drafted" & position %in% c("second_base","shortstop")) %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
filter(hitter_projections, status != "drafted" & position =="catcher") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
filter(hitter_projections, status != "drafted" & position == "outfield") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=picks.left, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Remaining Picks") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=picks.left, y=total_points, label = team_name))
drafterrors
write.csv(pasadena, "pasadena.csv")
write.csv(marmaduke, "marmaduke.csv")
marmaduke
standings.output
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
lm(spent ~ total_points, data = standings.output)
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
lm(spent ~ total_points, data = standings.output)
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
predict(lm(spent ~ total_points, data = standings.output))
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
predict(lm(total_points ~ spent, data = standings.output))
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
model <- predict(lm(total_points ~ spent, data = standings.output))
delta <- select(standings.output, total_points)
delta
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
model <- predict(lm(total_points ~ spent, data = standings.output))
delta <- select(standings.output, total_points) %>%
left_join(model)
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
model <- predict(lm(total_points ~ spent, data = standings.output))
delta <- select(standings.output, total_points) %>%
left_join(model)
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
model <- predict(lm(total_points ~ spent, data = standings.output))
delta <- select(standings.output, total_points)
class(model)
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
model <- predict(lm(total_points ~ spent, data = standings.output)) %>%
add_rownames()
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
model <- predict(lm(total_points ~ spent, data = standings.output)) %>%
tbl_df() %>%
add_rownames()
delta <- select(standings.output, total_points) %>%
class(model)
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
model <- predict(lm(total_points ~ spent, data = standings.output)) %>%
tbl_df() %>%
add_rownames()
delta <- select(standings.output, total_points)
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
model <- predict(lm(total_points ~ spent, data = standings.output)) %>%
tbl_df() %>%
add_rownames()
delta <- select(standings.output, total_points)
model
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
model <- predict(lm(total_points ~ spent, data = standings.output)) %>%
tbl_df() %>%
add_rownames() %>%
delta <- select(standings.output, total_points)
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
model <- predict(lm(total_points ~ spent, data = standings.output)) %>%
tbl_df() %>%
add_rownames() %>%
delta <- select(standings.output, total_points)
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
model <- predict(lm(total_points ~ spent, data = standings.output)) %>%
tbl_df() %>%
add_rownames()
delta <- select(standings.output, total_points)
model
delta
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
model <- predict(lm(total_points ~ spent, data = standings.output)) %>%
tbl_df() %>%
add_rownames()
delta <- select(standings.output, total_points) %>%
add_rownames() %>%
left_join(model)
delta
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
model <- predict(lm(total_points ~ spent, data = standings.output)) %>%
tbl_df() %>%
add_rownames()
delta <- select(standings.output, total_points) %>%
add_rownames() %>%
left_join(model) %>%
mutate(delta = total_points - value) %>%
arrange(-delta)
delta
