results <- select(raw_pos_data, name, Team, playerid) %>% distinct %>%
left_join(temp) %>%
filter(Team != "pecotaflag" | is.na(Team))
replacement <- filter(replacement_hitters, position==position_name)
names(replacement)[2:6] <- sapply(names(replacement)[2:6], paste, ".repl", sep="")
results <- cbind(results, replacement)
#make name for position projection df
dfname <- paste(position_name, "_proj", sep="")
#save it
assign(dfname, results)
#remove temp variables
remove("temp", "raw_pos_data", "at_bats", "results", "dfname")
}
#build all positional projections into a list
hitter_projections <- list(first_base_proj,
second_base_proj,
third_base_proj,
catcher_proj,
dh_proj,
outfield_proj,
shortstop_proj)
#convert coefficients frame to a normal data frame
coefs.for.calc <- as.numeric(coefs$estimate)
names(coefs.for.calc) <- coefs$Category
#create function to calculate value for a position
calculate.value <- function(df) {
mutate(df,
marginal.hr = HR - hr.repl,
marginal.runs = R - runs.repl,
marginal.rbi = RBI - rbi.repl,
marginal.sb = SB - sb.repl,
marginal.avg = AVG - avg.repl,
marginal.runs.points = marginal.runs * coefs.for.calc[["r"]],
marginal.hr.points = marginal.hr * coefs.for.calc[["hr"]],
marginal.rbi.points = marginal.rbi * coefs.for.calc[["rbi"]],
marginal.sb.points = marginal.sb * coefs.for.calc[["sb"]],
marginal.avg.points = marginal.avg * coefs.for.calc[["avg"]]/15,
marginal.total.points = (marginal.runs.points +
marginal.hr.points +
marginal.rbi.points +
marginal.avg.points +
marginal.sb.points)*1.2,#this is an adjustment upwards;
#in 2016 calculation, top 270 players
#result in only 735.5 marginal points.
#this means we adjust upwards to make 855
#marginal points (sum(1:18)*5)
#total of 4680 dollars exist in the league. 1700 marginal points exist. Therefore, marginal
#point is worth 4680/1700
dollar.value = marginal.total.points*(4680/1700)
)
}
#calculate values for all of the positions
hitter_projections <- lapply(hitter_projections, calculate.value)
#merge projections for different positions together.
hitter_projections <- do.call(rbind, hitter_projections)
#Calculate player's strongest position
best_position <- hitter_projections %>%
group_by(playerid) %>%
mutate(max_value = max(dollar.value),
is_best = max_value==dollar.value) %>%
filter(is_best) %>%
mutate(bestpos = position) %>%
select(playerid, bestpos)
hitter_projections <- hitter_projections %>%
left_join(best_position, by=c("playerid")) %>%
filter(position == bestpos) %>%
arrange(desc(dollar.value)) %>%
select(name, Team, position, playerid, PA, AB, R, HR, RBI, SB, AVG, marginal.total.points, dollar.value) %>%
mutate(AB=round(AB),PA = round(PA), R = round(R), HR=round(HR), RBI=round(RBI), SB=round(SB), AVG =round(AVG, 3),
marginal.total.points = round(marginal.total.points, 2),
dollar.value = round(dollar.value, 2)) %>%
filter(PA > 1)
################################################################
################PITCHER STUFF LIVES HERE########################
################################################################
#read in files for all of the systems other than ZIPS (which doesn't do saves)
projection_systems <- c("depthcharts",
"steamer",
"fans"
#"atc"
)
pitcher_proj <- map_chr(projection_systems, function(x) paste("./", x, "/pitchers.csv", sep="")) %>%
map(read_csv) %>%
setNames(projection_systems) %>%
at_depth(1, select, 1, playerid, Team, IP, ERA, WHIP, SO, SV, W) %>%
at_depth(1, setNames, c("name", "playerid", "Team", "IP", "ERA", "WHIP", "K", "SV", "W"))
####################################
############   PECOTA   ############
####################################
#read in PECOTA data and rename variables to line up
pecotapitch <- read_xls("./pecota/pecotafeb2018.xls",
sheet = "Pitchers") %>%
mutate(name = paste(FIRSTNAME, LASTNAME, sep=" ")) %>%
rename(Team = TEAM, K = SO) %>%
select(name, BPID, Team, IP, ERA, WHIP, K, SV, W) %>%
mutate(Team = "pecotaflag",
proj = "pecota")
pecotapitch <- left_join(pecotapitch, crosswalk) %>%
select(-BPID) %>%
filter(!is.na(playerid)) %>%
mutate()
#assign list of projection systems a name
for (system in 1:length(projection_systems)) {
system_name <- projection_systems[[system]]
pitcher_proj[[system_name]] <- mutate(pitcher_proj[[system_name]],
proj=system_name,
playerid = as.character(playerid))
}
pitcher_proj[["pecota"]] <- pecotapitch
#group everything together
pitcher_proj <- bind_rows(pitcher_proj)
# #read in zips data separately
# zips_proj <- read_csv("./zips/pitchers.csv") %>%
#       mutate(SV=NA, proj="zips") %>%
#       select(1, playerid, Team, IP, ERA, WHIP, SO, SV, W, proj) %>%
#       setNames(c("name", "playerid", "Team", "IP", "ERA", "WHIP", "K", "SV", "W", "proj"))
# pitcher_proj <- rbind(pitcher_proj, zips_proj)
# remove(zips_proj)
#get vector of innings pitched
innings <- filter(pitcher_proj, proj=="depthcharts") %>%
mutate(depthip = IP) %>%
select(name, Team, playerid, depthip)
#spread per ip numbers across depth charts IP
pitcher_proj <- mutate(pitcher_proj,
K_IP = K/IP,
SV_IP = SV/IP,
W_IP = W/IP) %>%
group_by(playerid) %>%
summarise(ERA = mean(ERA),
WHIP = mean(WHIP),
K_IP = mean(K/IP),
SV_IP = mean(SV/IP, na.rm=TRUE),
W_IP = mean(W/IP))
pitcher_proj <- left_join(innings, pitcher_proj) %>%
mutate(IP = depthip,
ERA = round(ERA, 2),
WHIP = round(WHIP, 2),
K = round(K_IP*IP, 0),
SV = round(SV_IP*IP, 0),
W = round(W_IP*IP, 0),
position = "pitcher") %>%
select(name, Team, IP, W, ERA, SV, K, WHIP, playerid, position)
#create replacement pitcher values
#these are the mean projections for the 170th through 190th best players
replacement.pitcher <- c(4.12,
1.336,
4,
4,
63)
names(replacement.pitcher) <- c("ERA.repl","WHIP.repl","W.repl","SV.repl","K.repl")
#calculate marginal values and points
pitcher_projections <- pitcher_proj %>%
mutate(
marginal.ERA = ERA - replacement.pitcher["ERA.repl"],
marginal.WHIP = WHIP - replacement.pitcher["WHIP.repl"],
marginal.W = W - replacement.pitcher["W.repl"],
marginal.SV = SV - replacement.pitcher["SV.repl"],
marginal.K = K - replacement.pitcher["K.repl"],
ERA.points = (marginal.ERA *coefs.for.calc[["era"]])*(IP/1464),
WHIP.points = (marginal.WHIP*coefs.for.calc[["whip"]])*(IP/1464),
W.points = marginal.W*coefs.for.calc[["w"]],
SV.points = marginal.SV*coefs.for.calc[["sv"]],
K.points = marginal.K*coefs.for.calc[["k"]],
marginal.total.points =  1.16*(ERA.points + WHIP.points + W.points + SV.points + K.points),
dollar.value = marginal.total.points*(4680/1700)
) %>%
#sort by dollar value
arrange(desc(dollar.value)) %>%
#select relevant columns
select(name,Team,position,playerid,IP,ERA,WHIP,SV,W,K,marginal.total.points,dollar.value) %>%
#round points and dollars columns
mutate(marginal.total.points = round(marginal.total.points, 2), dollar.value = round(dollar.value, 2)) %>%
#select only pithcers with at least 1 IP
filter(IP > 1)
save(hitter_projections, pitcher_projections, file = "projections.rda")
source("compileleague.R")
library(dplyr)
standings.output %>% mutate(hit.points = R_points + HR_points + RBI_points + SB_points + AVG_points,
pitch.points = ERA_points + WHIP_points + K_points + SV_points + W_points) %>%
select(team_name, spent, left, picks.left, total_points, hit.points,
pitch.points)
toppitch <- filter(pitcher_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, IP, ERA, WHIP, K, SV, W, pts, dlr)
data.frame(toppitch[1:20,])
topdh <- filter(hitter_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr)
data.frame(topdh)[1:20,]
filter(hitter_projections, status != "drafted" & position =="catcher") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
filter(hitter_projections, status != "drafted" & position == "outfield") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
model <- predict(lm(total_points ~ spent, data = standings.output)) %>%
tbl_df() %>%
add_rownames()
delta <- select(standings.output, total_points) %>%
add_rownames() %>%
left_join(model) %>%
mutate(delta = total_points - value) %>%
arrange(-delta)
delta
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=picks.left, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Remaining Picks") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=picks.left, y=total_points, label = team_name))
drafterrors
write.csv(pasadena, "pasadena.csv")
write.csv(marmaduke, "marmaduke.csv")
source("compileleague.R")
library(dplyr)
standings.output %>% mutate(hit.points = R_points + HR_points + RBI_points + SB_points + AVG_points,
pitch.points = ERA_points + WHIP_points + K_points + SV_points + W_points) %>%
select(team_name, spent, left, picks.left, total_points, hit.points,
pitch.points)
toppitch <- filter(pitcher_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, IP, ERA, WHIP, K, SV, W, pts, dlr)
data.frame(toppitch[1:20,])
topdh <- filter(hitter_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr)
data.frame(topdh)[1:20,]
filter(hitter_projections, status != "drafted" & position =="catcher") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
filter(hitter_projections, status != "drafted" & position == "outfield") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
model <- predict(lm(total_points ~ spent, data = standings.output)) %>%
tbl_df() %>%
add_rownames()
delta <- select(standings.output, total_points) %>%
add_rownames() %>%
left_join(model) %>%
mutate(delta = total_points - value) %>%
arrange(-delta)
delta
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=picks.left, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Remaining Picks") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=picks.left, y=total_points, label = team_name))
drafterrors
write.csv(pasadena, "pasadena.csv")
write.csv(marmaduke, "marmaduke.csv")
source("compileleague.R")
library(dplyr)
standings.output %>% mutate(hit.points = R_points + HR_points + RBI_points + SB_points + AVG_points,
pitch.points = ERA_points + WHIP_points + K_points + SV_points + W_points) %>%
select(team_name, spent, left, picks.left, total_points, hit.points,
pitch.points)
toppitch <- filter(pitcher_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, IP, ERA, WHIP, K, SV, W, pts, dlr)
data.frame(toppitch[1:20,])
topdh <- filter(hitter_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr)
data.frame(topdh)[1:20,]
filter(hitter_projections, status != "drafted" & position =="catcher") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
filter(hitter_projections, status != "drafted" & position == "outfield") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
model <- predict(lm(total_points ~ spent, data = standings.output)) %>%
tbl_df() %>%
add_rownames()
delta <- select(standings.output, total_points) %>%
add_rownames() %>%
left_join(model) %>%
mutate(delta = total_points - value) %>%
arrange(-delta)
delta
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=picks.left, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Remaining Picks") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=picks.left, y=total_points, label = team_name))
drafterrors
write.csv(pasadena, "pasadena.csv")
write.csv(marmaduke, "marmaduke.csv")
source("compileleague.R")
library(dplyr)
standings.output %>% mutate(hit.points = R_points + HR_points + RBI_points + SB_points + AVG_points,
pitch.points = ERA_points + WHIP_points + K_points + SV_points + W_points) %>%
select(team_name, spent, left, picks.left, total_points, hit.points,
pitch.points)
toppitch <- filter(pitcher_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, IP, ERA, WHIP, K, SV, W, pts, dlr)
data.frame(toppitch[1:20,])
topdh <- filter(hitter_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr)
data.frame(topdh)[1:20,]
filter(hitter_projections, status != "drafted" & position =="catcher") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
filter(hitter_projections, status != "drafted" & position == "outfield") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
model <- predict(lm(total_points ~ spent, data = standings.output)) %>%
tbl_df() %>%
add_rownames()
delta <- select(standings.output, total_points) %>%
add_rownames() %>%
left_join(model) %>%
mutate(delta = total_points - value) %>%
arrange(-delta)
delta
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=picks.left, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Remaining Picks") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=picks.left, y=total_points, label = team_name))
drafterrors
write.csv(pasadena, "pasadena.csv")
write.csv(marmaduke, "marmaduke.csv")
standings.output
hermanos
sturgeon
source("compileleague.R")
library(dplyr)
standings.output %>% mutate(hit.points = R_points + HR_points + RBI_points + SB_points + AVG_points,
pitch.points = ERA_points + WHIP_points + K_points + SV_points + W_points) %>%
select(team_name, spent, left, picks.left, total_points, hit.points,
pitch.points)
toppitch <- filter(pitcher_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, IP, ERA, WHIP, K, SV, W, pts, dlr)
data.frame(toppitch[1:20,])
topdh <- filter(hitter_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr)
data.frame(topdh)[1:20,]
filter(hitter_projections, status != "drafted" & position =="catcher") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
filter(hitter_projections, status != "drafted" & position == "outfield") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
model <- predict(lm(total_points ~ spent, data = standings.output)) %>%
tbl_df() %>%
add_rownames()
delta <- select(standings.output, total_points) %>%
add_rownames() %>%
left_join(model) %>%
mutate(delta = total_points - value) %>%
arrange(-delta)
delta
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=picks.left, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Remaining Picks") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=picks.left, y=total_points, label = team_name))
drafterrors
write.csv(pasadena, "pasadena.csv")
write.csv(marmaduke, "marmaduke.csv")
source("compileleague.R")
library(dplyr)
standings.output %>% mutate(hit.points = R_points + HR_points + RBI_points + SB_points + AVG_points,
pitch.points = ERA_points + WHIP_points + K_points + SV_points + W_points) %>%
select(team_name, spent, left, picks.left, total_points, hit.points,
pitch.points)
toppitch <- filter(pitcher_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, IP, ERA, WHIP, K, SV, W, pts, dlr)
data.frame(toppitch[1:20,])
topdh <- filter(hitter_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr)
data.frame(topdh)[1:20,]
filter(hitter_projections, status != "drafted" & position =="catcher") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
filter(hitter_projections, status != "drafted" & position == "outfield") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() <21)
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=spent, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Dollars Spent") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=spent, y=total_points, label = team_name))
model <- predict(lm(total_points ~ spent, data = standings.output)) %>%
tbl_df() %>%
add_rownames()
delta <- select(standings.output, total_points) %>%
add_rownames() %>%
left_join(model) %>%
mutate(delta = total_points - value) %>%
arrange(-delta)
delta
library(ggplot2)
library(ggrepel)
ggplot(standings.output, aes(x=picks.left, y=total_points)) +
geom_point() +
theme_minimal() +
xlab("Remaining Picks") +
ylab("Projected Points")+
geom_smooth(method = lm, se = FALSE, size = .4)+
geom_text_repel(aes(x=picks.left, y=total_points, label = team_name))
drafterrors
write.csv(pasadena, "pasadena.csv")
write.csv(marmaduke, "marmaduke.csv")
marmaduke
isotopes
marmaduke
standings.output
