today <- c(
"Kurt Suzuki",
"Welington Castillo",
"Gregory Polanco",
"Marco Gonzales",
"Enrique Hernandez",
"Austin Hedges",
"Yuli Gurriel",
"Jorge Alfaro"
) %>%
tbl_df() %>%
set_names("Name")
kable(left_join(today, hitterpitcher) %>%
select(Name, marginal.total.points, dollar.value))
#get number and average positional value for hitters
hitter_status <- hitter_projections %>%
filter(status != "drafted",
dollar.value > 1) %>%
group_by(position) %>%
summarise(remaining = n(),
max = max(dollar.value),
avg = mean(dollar.value)) %>%
modify_at(c("avg", "max"), round, 1)
#get number and average positional value for pitchers
pitcher_status <- pitcher_projections %>%
filter(status != "drafted",
dollar.value > 1) %>%
summarise(remaining = n(),
max = max(dollar.value),
avg = mean(dollar.value)) %>%
mutate(position = "pitcher") %>%
modify_at(c("avg", "max"), round, 1) %>%
select(position, remaining, max, avg)
kable(rbind(hitter_status, pitcher_status))
#get open roster spots of each time
big_team_df <- data.frame()
all_positions <- marmaduke %>% pull(roster_spot)
for (team in teams) {big_team_df <- rbind(big_team_df, get(team))}
for (position in all_positions) {big_team_df <- add_row(big_team_df,
roster_spot = position,
Name = "")}
#calculate number of open roster spots at each position
big_team_df <- filter(big_team_df, Name=="") %>%
group_by(roster_spot) %>%
summarise(remaining = n()) %>%
spread(roster_spot, remaining) %>%
mutate_all(function(x) x-1) %>%
mutate(C = C1 + C2,
OF = OF1 + OF2 + OF3 +OF4 + OF5 + OF6,
P = P1+P2+P3+P4+P5+P6+P7+P8+P9+P10) %>%
select(-(P1:P9), -(OF1:OF6), -(C1:C2)) %>%
gather(Position, Still_to_be_Drafted)
kable(big_team_df)
library(knitr)
standings <- standings.output %>% mutate(hit.points = R_points + HR_points + RBI_points + SB_points + AVG_points,
pitch.points = ERA_points + WHIP_points + K_points + SV_points + W_points,
max_bid = left - picks.left + 1) %>%
select(team_name, spent, left, picks.left, max_bid, total_points, hit.points,
pitch.points)
kable(standings)
toppitch <- filter(pitcher_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(Name, Team, IP, ERA, WHIP, K, SV, W, pts, dlr) %>%
filter(row_number() < 16)
kable(toppitch)
topdh <- filter(hitter_projections, status != "drafted") %>%
mutate(pts = marginal.total.points, dlr = dollar.value) %>%
select(Name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
arrange(-dlr) %>%
filter(row_number() < 16)
kable(topdh)
# filter(hitter_projections, status != "drafted" & position == "outfield") %>%
#       mutate(pts = marginal.total.points, dlr = dollar.value) %>%
#       select(Name, Team, PA, R, HR, RBI, SB, AVG, pts, dlr)  %>%
#       arrange(-dlr) %>%
#   filter(row_number() <21)
library(lubridate)
valuepicks <- draftpicks %>%
left_join(hitter_projections, by=c("player"="Name")) %>%
left_join(pitcher_projections, by=c("player"="Name")) %>%
mutate(drafted=ymd(drafted)) %>%
filter(year(drafted)==2019)
View(valuepicks)
library(lubridate)
valuepicks <- draftpicks %>%
left_join(hitter_projections, by=c("player"="Name")) %>%
left_join(pitcher_projections, by=c("player"="Name")) %>%
mutate(drafted=ymd(drafted)) %>%
filter(year(drafted)==2019) %>%
select(team, player, salary, dollar.value.x, dollar.value.y) %>%
mutate(dollar_value = pmax(dollar.value.x, dollar.value.y, na.rm=TRUE),
equity = dollar_value - salary) %>%
arrange(-equity) %>%
select(team, player, salary, dollar_value, equity)
kable(valuepicks)
library(tidyverse)
#Load parameters file
source("parameters.R")
#load in coefficients file
if (!file.exists("coefs.rda")) {
source("historyanalysis.R")
}
#load hitter and pitcher projections
if (!file.exists("projections.rda")) {
source("calculatevalue.R")
} else{
load("projections.rda")
}
#Build league
source("leaguesetup.R")
#run draft
source("draftpicks.R")
#merge in projections
source("mergeinprojections.R")
#calculate standings
source("calculatestandings.R")
#write to .csv
source("csvwriter.R")
standings.output
View(marmaduke)
View(standings)
View(standings.output)
View(allrise)
View(marmaduke)
View(hitter_projections)
filter(hitter_projections, Name = "Garrett Hampson")
filter(hitter_projections, Name == "Garrett Hampson")
filter(hitter_projections, Name == "Nick Senzel")
View(marmaduke)
library(tidyverse)
#Load parameters file
source("parameters.R")
#load in coefficients file
if (!file.exists("coefs.rda")) {
source("historyanalysis.R")
}
#load hitter and pitcher projections
if (!file.exists("projections.rda")) {
source("calculatevalue.R")
} else{
load("projections.rda")
}
#Build league
source("leaguesetup.R")
#run draft
source("draftpicks.R")
#merge in projections
source("mergeinprojections.R")
#calculate standings
source("calculatestandings.R")
#write to .csv
source("csvwriter.R")
standings.output
View(bears)
View(pkdodgers)
View(allrise)
View(marmaduke)
library(tidyverse)
#Load parameters file
source("parameters.R")
#load in coefficients file
if (!file.exists("coefs.rda")) {
source("historyanalysis.R")
}
#load hitter and pitcher projections
if (!file.exists("projections.rda")) {
source("calculatevalue.R")
} else{
load("projections.rda")
}
#Build league
source("leaguesetup.R")
#run draft
source("draftpicks.R")
#merge in projections
source("mergeinprojections.R")
#calculate standings
source("calculatestandings.R")
#write to .csv
source("csvwriter.R")
standings.output
View(marmaduke)
View(standings.output)
View(marmaduke)
bench_bucks <- draftpicks %>%
filter(position = "B")
bench_bucks <- draftpicks %>%
filter(position == "B")
View(bench_bucks)
bench_bucks <- draftpicks %>%
filter(position == "B", salary >0)
ench_bucks <- draftpicks %>%
filter(position == "B", salary >0) %>%
group_by(team) %>%
summarise(bench_dollars = sum(salary))
bench_bucks <- draftpicks %>%
filter(position == "B", salary >0) %>%
group_by(team) %>%
summarise(bench_dollars = sum(salary))
View(bench_bucks)
View(standings)
standings <- standings %>%
left_join(bench_bucks, by=c("team_name" = "team"))
standings <- standings %>%
left_join(bench_bucks, by=c("team_name" = "team")) %>%
mutate(spent = spent + bench_bucks)
?left_join
standings <- standings %>%
left_join(bench_bucks, by=c("team_name" = "team")) %>%
mutate(
spent = spent + bench_dollars)
standings <- data.frame()
#Calculate current standings
for (team in teams) {
temp <- get(team) %>%
summarise(R = sum(R, na.rm=TRUE),
HR = sum(HR, na.rm=TRUE),
RBI = sum(RBI, na.rm=TRUE),
SB = sum(SB, na.rm=TRUE),
AVG = sum(AVG*AB, na.rm=TRUE)/sum(AB, na.rm=TRUE),
ERA = sum(IP*ERA, na.rm=TRUE)/sum(IP, na.rm=TRUE),
WHIP = sum(IP*WHIP, na.rm=TRUE)/sum(IP, na.rm=TRUE),
K = sum(K, na.rm=TRUE),
SV =sum(SV, na.rm=TRUE),
W = sum(W, na.rm=TRUE),
spent = sum(salary, na.rm=TRUE),
left = 260-sum(salary, na.rm=TRUE),
picks.left = sum(salary == 0 & Name =="")
) %>%
mutate(team_name = team) %>%
select(team_name, spent, left, picks.left, R, HR, RBI, SB, AVG, ERA, WHIP, K, SV, W)
#add results to standings
standings <- rbind(standings, temp)
remove(temp)
}
#load coeficients for calculating standings
load("standingscoefs.rda")
#calculate points
stats <- c("R", "HR", "RBI", "SB", "AVG", "ERA", "WHIP", "K","SV","W")
for (stat in stats) {
column.name <- paste(stat,"_points", sep="")
standings[column.name] <- coefs.standings[coefs.standings$Category==tolower(stat),2] +
coefs.standings[coefs.standings$Category==tolower(stat),3]*
standings[stat]
}
points.var.names <- paste(stats, "_points", sep="")
#create function to fix impossible numbers
rational.points <- function(vector) {
column <- vector %>%
sapply(max, 1) %>%
sapply(min, 18) %>%
sapply(round, 1)
column
}
standings[points.var.names] <- lapply(standings[points.var.names], rational.points)
standings <- mutate(standings, total_points =
R_points +
HR_points+
RBI_points+
SB_points+
AVG_points+
ERA_points+
WHIP_points+
K_points+
SV_points+
W_points) %>%
mutate(total_points = round(total_points,1)) %>%
arrange(desc(total_points))
bench_bucks <- draftpicks %>%
filter(position == "B", salary >0) %>%
group_by(team) %>%
summarise(bench_dollars = sum(salary))
standings <- standings %>%
left_join(bench_bucks, by=c("team_name" = "team")) %>%
mutate(
spent = spent + bench_dollars)
View(standings)
library(tidyverse)
#Load parameters file
source("parameters.R")
#load in coefficients file
if (!file.exists("coefs.rda")) {
source("historyanalysis.R")
}
#load hitter and pitcher projections
if (!file.exists("projections.rda")) {
source("calculatevalue.R")
} else{
load("projections.rda")
}
#Build league
source("leaguesetup.R")
#run draft
source("draftpicks.R")
#merge in projections
source("mergeinprojections.R")
#calculate standings
source("calculatestandings.R")
#write to .csv
source("csvwriter.R")
standings.output
standings <- data.frame()
#Calculate current standings
for (team in teams) {
temp <- get(team) %>%
summarise(R = sum(R, na.rm=TRUE),
HR = sum(HR, na.rm=TRUE),
RBI = sum(RBI, na.rm=TRUE),
SB = sum(SB, na.rm=TRUE),
AVG = sum(AVG*AB, na.rm=TRUE)/sum(AB, na.rm=TRUE),
ERA = sum(IP*ERA, na.rm=TRUE)/sum(IP, na.rm=TRUE),
WHIP = sum(IP*WHIP, na.rm=TRUE)/sum(IP, na.rm=TRUE),
K = sum(K, na.rm=TRUE),
SV =sum(SV, na.rm=TRUE),
W = sum(W, na.rm=TRUE),
spent = sum(salary, na.rm=TRUE),
left = 260-sum(salary, na.rm=TRUE),
picks.left = sum(salary == 0 & Name =="")
) %>%
mutate(team_name = team) %>%
select(team_name, spent, left, picks.left, R, HR, RBI, SB, AVG, ERA, WHIP, K, SV, W)
#add results to standings
standings <- rbind(standings, temp)
remove(temp)
}
#load coeficients for calculating standings
load("standingscoefs.rda")
#calculate points
stats <- c("R", "HR", "RBI", "SB", "AVG", "ERA", "WHIP", "K","SV","W")
for (stat in stats) {
column.name <- paste(stat,"_points", sep="")
standings[column.name] <- coefs.standings[coefs.standings$Category==tolower(stat),2] +
coefs.standings[coefs.standings$Category==tolower(stat),3]*
standings[stat]
}
points.var.names <- paste(stats, "_points", sep="")
#create function to fix impossible numbers
rational.points <- function(vector) {
column <- vector %>%
sapply(max, 1) %>%
sapply(min, 18) %>%
sapply(round, 1)
column
}
standings[points.var.names] <- lapply(standings[points.var.names], rational.points)
standings <- mutate(standings, total_points =
R_points +
HR_points+
RBI_points+
SB_points+
AVG_points+
ERA_points+
WHIP_points+
K_points+
SV_points+
W_points) %>%
mutate(total_points = round(total_points,1)) %>%
arrange(desc(total_points))
bench_bucks <- draftpicks %>%
filter(position == "B", salary >0) %>%
group_by(team) %>%
summarise(bench_dollars = sum(salary))
standings <- standings %>%
left_join(bench_bucks, by=c("team_name" = "team")) %>%
mutate(
bench_dollars = ifelse(is.na(bench_dollars), 0, bench_dollars),
spent = spent + bench_dollars,
left = left - bench_dollars)
View(standings)
library(tidyverse)
#Load parameters file
source("parameters.R")
#load in coefficients file
if (!file.exists("coefs.rda")) {
source("historyanalysis.R")
}
#load hitter and pitcher projections
if (!file.exists("projections.rda")) {
source("calculatevalue.R")
} else{
load("projections.rda")
}
#Build league
source("leaguesetup.R")
#run draft
source("draftpicks.R")
#merge in projections
source("mergeinprojections.R")
#calculate standings
source("calculatestandings.R")
#write to .csv
source("csvwriter.R")
standings.output
library(tidyverse)
#Load parameters file
source("parameters.R")
#load in coefficients file
if (!file.exists("coefs.rda")) {
source("historyanalysis.R")
}
#load hitter and pitcher projections
if (!file.exists("projections.rda")) {
source("calculatevalue.R")
} else{
load("projections.rda")
}
#Build league
source("leaguesetup.R")
#run draft
source("draftpicks.R")
#merge in projections
source("mergeinprojections.R")
#calculate standings
source("calculatestandings.R")
#write to .csv
source("csvwriter.R")
standings.output
View(dembums)
View(ottawa)
View(deener)
View(bellevegas)
View(bears)
View(pasadena)
library(tidyverse)
#Load parameters file
source("parameters.R")
#load in coefficients file
if (!file.exists("coefs.rda")) {
source("historyanalysis.R")
}
#load hitter and pitcher projections
if (!file.exists("projections.rda")) {
source("calculatevalue.R")
} else{
load("projections.rda")
}
#Build league
source("leaguesetup.R")
#run draft
source("draftpicks.R")
#merge in projections
source("mergeinprojections.R")
#calculate standings
source("calculatestandings.R")
#write to .csv
source("csvwriter.R")
standings.output
View(bears)
View(isotopes)
View(deener)
View(hermanos)
View(balco)
View(isotopes)
library(knitr)
source("compileleague.R")
today <- c(
"Mychal Givens",
"Brandon Morrow",
"Shane Greene",
"Isiah Kiner-Falefa",
"Ketel Marte",
"John Hicks",
"Troy Tulowitzki",
"Lou Trivino"
) %>%
tbl_df() %>%
set_names("Name")
kable(left_join(today, hitterpitcher) %>%
select(Name, marginal.total.points, dollar.value))
#get number and average positional value for hitters
hitter_status <- hitter_projections %>%
filter(status != "drafted",
dollar.value > 1) %>%
group_by(position) %>%
summarise(remaining = n(),
max = max(dollar.value),
avg = mean(dollar.value)) %>%
modify_at(c("avg", "max"), round, 1)
#get number and average positional value for pitchers
pitcher_status <- pitcher_projections %>%
filter(status != "drafted",
dollar.value > 1) %>%
summarise(remaining = n(),
max = max(dollar.value),
avg = mean(dollar.value)) %>%
mutate(position = "pitcher") %>%
modify_at(c("avg", "max"), round, 1) %>%
select(position, remaining, max, avg)
kable(rbind(hitter_status, pitcher_status))
#get open roster spots of each time
big_team_df <- data.frame()
all_positions <- marmaduke %>% pull(roster_spot)
for (team in teams) {big_team_df <- rbind(big_team_df, get(team))}
for (position in all_positions) {big_team_df <- add_row(big_team_df,
roster_spot = position,
Name = "")}
#calculate number of open roster spots at each position
big_team_df <- filter(big_team_df, Name=="") %>%
group_by(roster_spot) %>%
summarise(remaining = n()) %>%
spread(roster_spot, remaining) %>%
mutate_all(function(x) x-1) %>%
mutate(C = C1 + C2,
OF = OF1 + OF2 + OF3 +OF4 + OF5 + OF6,
P = P1+P2+P3+P4+P5+P6+P7+P8+P9+P10) %>%
select(-(P1:P9), -(OF1:OF6), -(C1:C2)) %>%
gather(Position, Still_to_be_Drafted)
tot_picks <- data.frame(Position = "Total",
Still_to_be_Drafted=sum(big_team_df$Still_to_be_Drafted))
big_team_df <- rbind(big_team_df, tot_picks)
kable(big_team_df)
View(marmaduke)
